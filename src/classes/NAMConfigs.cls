/**
* @description
* @author Andres Canavesi
* @date 2017-11-03
*/
public class NAMConfigs {
    
    /**
* @description 
* @param configName
* @return the config by Its configName or null if it doesn't exist
*/
    private static NAMConfig__c getConfig(String configName){
        List<NAMConfig__c> configs = [SELECT Value__c FROM NAMConfig__c WHERE Name = :configName LIMIT 1];
        if(configs.size() == 0){
            return null;
        }else{
            return configs.get(0);            
        }
        
    }
    
    
    /**
* @description
* @return the batch size for Attachments migrator tool. If the config does not exist, returns a default value
*/
    public static Integer getBatchSizeForAttachments(){
        NAMConfig__c config =  NAMConfigs.getConfig('BatchSizeAttachments');
        if(config == null){
            return 100;
        }
        return Integer.valueOf(config.Value__c);
    }
    
       /**
* @description
* @return the BodyLength for Attachments migrator tool to query. If the config does not exist, returns a default value
*/
    public static Integer getBodyLength(){
        NAMConfig__c config =  NAMConfigs.getConfig('BodyLength');
        if(config == null){
            return 1;
        }
        return Integer.valueOf(config.Value__c);
    }

    
    /**
* @description
* @return the dinamic batch size for Attachments migrator tool (to rerun the batch if cpu limit). If the config does not exist, returns a default value
*/
    public static Integer getDinamicBatchSizeForAttachments(){
        NAMConfig__c config =  NAMConfigs.getConfig('DinamicBatchSizeAttachments');
        if(config == null){
            return 100;
        }
        return Integer.valueOf(config.Value__c);
    }
    
    /**
* @description
* @return the batch size for Notes migrator tool. If the config does not exist, returns a default value
*/
    public static Integer getBatchSizeForNotes(){
        NAMConfig__c config =  NAMConfigs.getConfig('BatchSizeNotes');
        if(config == null){
            return 200;
        }
        return Integer.valueOf(config.Value__c);
    }
    
    /**
* @description
* @return true if the tool should enable dynamic batch sizing, false in other cases.
*/
    public static Boolean getEnableDynamicBatchSize(){
        NAMConfig__c config =  NAMConfigs.getConfig('EnableDynamicBatchSize');
        if(config == null){
            return false;
        }
        return Boolean.valueOf(config.Value__c);
    }
    
     /**
* @description
* @return true if the tool should enable BodyLength when query Attachments false in other cases.
*/
    public static Boolean getEnableBodyLength(){
        NAMConfig__c config =  NAMConfigs.getConfig('EnableBodyLength');
        if(config == null){
            return false;
        }
        
        return Boolean.valueOf(config.Value__c);
    }
    
    
    /**
* @description
* @return min batch size that the tool will reach in dynamic batch size mode.
*/
    public static Integer getMinBatchSize(){
        NAMConfig__c config =  NAMConfigs.getConfig('MinBatchSize');
        if(config == null){
            return 1;
        }
        return Integer.valueOf(config.Value__c);
    }
    
    /**
* @description
* @return metadata pagination size.
*/
    public static Integer getMetadataPageSize(){
        NAMConfig__c config =  NAMConfigs.getConfig('MetadataPageSize');
        if(config == null){
            return 20;
        }
        return Integer.valueOf(config.Value__c);
    }
    
    /**
* @description
* @return 
*/
    public static void setMetadataPageSize(Integer size){
        if(Schema.sObjectType.NAMConfig__c.fields.Name.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Name.isUpdateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isUpdateable()){
               NAMConfig__c config =  NAMConfigs.getConfig('MetadataPageSize');
               if(config == null){
                   config = new NAMConfig__c();
                   config.Name = 'MetadataPageSize';
               }
               config.Value__c = String.valueOf(size);
               upsert config;
           }
    }
    
    /**
* @description
* @param
*/
    public static void setBatchSizeForAttachments(Integer size){
        if(Schema.sObjectType.NAMConfig__c.fields.Name.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Name.isUpdateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isUpdateable()){
               NAMConfig__c config =  NAMConfigs.getConfig('BatchSizeAttachments');
               if(config == null){
                   config = new NAMConfig__c();
                   config.Name = 'BatchSizeAttachments';
               }
               config.Value__c = String.valueOf(size);
               upsert config;
           }
    }
    
    /**
* @description
* @param
*/
    public static void setDinamicBatchSizeForAttachments(Integer size){
        if(Schema.sObjectType.NAMConfig__c.fields.Name.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Name.isUpdateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isUpdateable()){
               NAMConfig__c config =  NAMConfigs.getConfig('DinamicBatchSizeAttachments');
               if(config == null){
                   config = new NAMConfig__c();
                   config.Name = 'DinamicBatchSizeAttachments';
               }
               config.Value__c = String.valueOf(size);
               upsert config;
           }
    }
    
        /**
* @description
* @param
*/
    public static void setBodyLength(Integer size){
        if(Schema.sObjectType.NAMConfig__c.fields.Name.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Name.isUpdateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isUpdateable()){
               NAMConfig__c config =  NAMConfigs.getConfig('BodyLength');
               if(config == null){
                   config = new NAMConfig__c();
                   config.Name = 'BodyLength';
               }
               config.Value__c = String.valueOf(size);
               upsert config;
           }
    }
    
    /**
* @description
* @param
*/
    public static void setBatchSizeForNotes(Integer size){
        if(Schema.sObjectType.NAMConfig__c.fields.Name.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Name.isUpdateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isUpdateable()){
               NAMConfig__c config =  NAMConfigs.getConfig('BatchSizeNotes');
               if(config == null){
                   config = new NAMConfig__c();
                   config.Name = 'BatchSizeNotes';
               }
               config.Value__c = String.valueOf(size);
               upsert config;
           }
    }
    
    
    /**
* @description
* @param
*/
    public static void setEnableDynamicBatchSize(Boolean value){
        if(Schema.sObjectType.NAMConfig__c.fields.Name.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Name.isUpdateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isUpdateable()){
               NAMConfig__c config =  NAMConfigs.getConfig('EnableDynamicBatchSize');
               if(config == null){
                   config = new NAMConfig__c();
                   config.Name = 'EnableDynamicBatchSize';
               }
               config.Value__c = String.valueOf(value);
               upsert config;
           }
    }
    
    /**
* @description
* @param
*/
    public static void setEnableBodyLength(Boolean value){
        if(Schema.sObjectType.NAMConfig__c.fields.Name.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Name.isUpdateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isUpdateable()){
               NAMConfig__c config =  NAMConfigs.getConfig('EnableBodyLength');
               if(config == null){
                   config = new NAMConfig__c();
                   config.Name = 'EnableBodyLength';
               }
               config.Value__c = String.valueOf(value);
               upsert config;
           }
    }
    /**
* @description
* @param
*/
    public static void setMinBatchSize(Integer size){
        if(Schema.sObjectType.NAMConfig__c.fields.Name.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isCreateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Name.isUpdateable()
           &&Schema.sObjectType.NAMConfig__c.fields.Value__c.isUpdateable()){
               NAMConfig__c config =  NAMConfigs.getConfig('MinBatchSize');
               if(config == null){
                   config = new NAMConfig__c();
                   config.Name = 'MinBatchSize';
               }
               config.Value__c = String.valueOf(size);
               upsert config;
           }
    }
}